{"version":3,"file":"src_components_workers_embeddings_forceatlas2_worker_ts.js","mappings":"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CA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;;;;WCAA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://PSE/webpack/universalModuleDefinition","webpack://PSE/./src/components/workers/embeddings/forceatlas2.worker.ts","webpack://PSE/webpack/bootstrap","webpack://PSE/webpack/runtime/chunk loaded","webpack://PSE/webpack/runtime/compat get default export","webpack://PSE/webpack/runtime/define property getters","webpack://PSE/webpack/runtime/ensure chunk","webpack://PSE/webpack/runtime/get javascript chunk filename","webpack://PSE/webpack/runtime/hasOwnProperty shorthand","webpack://PSE/webpack/runtime/make namespace object","webpack://PSE/webpack/runtime/publicPath","webpack://PSE/webpack/runtime/importScripts chunk loading","webpack://PSE/webpack/runtime/startup chunk dependencies","webpack://PSE/webpack/before-startup","webpack://PSE/webpack/startup","webpack://PSE/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PSE\"] = factory();\n\telse\n\t\troot[\"PSE\"] = factory();\n})(self, () => {\nreturn ","/* eslint-disable no-multi-assign */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable no-lonely-if */\n/* eslint-disable no-param-reassign */\n\nimport Graph from 'graphology';\n\n/* eslint no-constant-condition: 0 */\n/**\n * Graphology ForceAtlas2 Iteration\n * =================================\n *\n * Function used to perform a single iteration of the algorithm.\n */\n\n/**\n * Matrices properties accessors.\n */\nconst NODE_X = 0;\nconst NODE_Y = 1;\nconst NODE_DX = 2;\nconst NODE_DY = 3;\nconst NODE_OLD_DX = 4;\nconst NODE_OLD_DY = 5;\nconst NODE_MASS = 6;\nconst NODE_CONVERGENCE = 7;\nconst NODE_SIZE = 8;\nconst NODE_FIXED = 9;\n\nconst EDGE_SOURCE = 0;\nconst EDGE_TARGET = 1;\nconst EDGE_WEIGHT = 2;\n\nconst REGION_NODE = 0;\nconst REGION_CENTER_X = 1;\nconst REGION_CENTER_Y = 2;\nconst REGION_SIZE = 3;\nconst REGION_NEXT_SIBLING = 4;\nconst REGION_FIRST_CHILD = 5;\nconst REGION_MASS = 6;\nconst REGION_MASS_CENTER_X = 7;\nconst REGION_MASS_CENTER_Y = 8;\n\nconst SUBDIVISION_ATTEMPTS = 3;\n\n/**\n * Constants.\n */\nconst PPN = 10;\nconst PPE = 3;\nconst PPR = 9;\n\nconst MAX_FORCE = 10;\n\n/**\n * Function used to perform a single interation of the algorithm.\n *\n * @param  {object}       options    - Layout options.\n * @param  {Float32Array} NodeMatrix - Node data.\n * @param  {Float32Array} EdgeMatrix - Edge data.\n * @return {object}                  - Some metadata.\n */\nfunction iterate(options, NodeMatrix, EdgeMatrix) {\n  // Initializing variables\n  let l;\n  let r;\n  let n;\n  let n1;\n  let n2;\n  let rn;\n  let e;\n  let w;\n  let g;\n  let s;\n\n  const order = NodeMatrix.length;\n  const size = EdgeMatrix.length;\n\n  const { adjustSizes } = options;\n\n  const thetaSquared = options.barnesHutTheta * options.barnesHutTheta;\n\n  let outboundAttCompensation;\n  let coefficient;\n  let xDist;\n  let yDist;\n  let ewc;\n  let distance;\n  let factor;\n\n  const RegionMatrix = [];\n\n  // 1) Initializing layout data\n  //-----------------------------\n\n  // Resetting positions & computing max values\n  for (n = 0; n < order; n += PPN) {\n    NodeMatrix[n + NODE_OLD_DX] = NodeMatrix[n + NODE_DX];\n    NodeMatrix[n + NODE_OLD_DY] = NodeMatrix[n + NODE_DY];\n    NodeMatrix[n + NODE_DX] = 0;\n    NodeMatrix[n + NODE_DY] = 0;\n  }\n\n  // If outbound attraction distribution, compensate\n  if (options.outboundAttractionDistribution) {\n    outboundAttCompensation = 0;\n    for (n = 0; n < order; n += PPN) {\n      outboundAttCompensation += NodeMatrix[n + NODE_MASS];\n    }\n\n    outboundAttCompensation /= order / PPN;\n  }\n\n  // 1.bis) Barnes-Hut computation\n  //------------------------------\n\n  if (options.barnesHutOptimize) {\n    // Setting up\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n    let q;\n    let q2;\n    let subdivisionAttempts;\n\n    // Computing min and max values\n    for (n = 0; n < order; n += PPN) {\n      minX = Math.min(minX, NodeMatrix[n + NODE_X]);\n      maxX = Math.max(maxX, NodeMatrix[n + NODE_X]);\n      minY = Math.min(minY, NodeMatrix[n + NODE_Y]);\n      maxY = Math.max(maxY, NodeMatrix[n + NODE_Y]);\n    }\n\n    // squarify bounds, it's a quadtree\n    const dx = maxX - minX;\n    const dy = maxY - minY;\n    if (dx > dy) {\n      minY -= (dx - dy) / 2;\n      maxY = minY + dx;\n    } else {\n      minX -= (dy - dx) / 2;\n      maxX = minX + dy;\n    }\n\n    // Build the Barnes Hut root region\n    RegionMatrix[0 + REGION_NODE] = -1;\n    RegionMatrix[0 + REGION_CENTER_X] = (minX + maxX) / 2;\n    RegionMatrix[0 + REGION_CENTER_Y] = (minY + maxY) / 2;\n    RegionMatrix[0 + REGION_SIZE] = Math.max(maxX - minX, maxY - minY);\n    RegionMatrix[0 + REGION_NEXT_SIBLING] = -1;\n    RegionMatrix[0 + REGION_FIRST_CHILD] = -1;\n    RegionMatrix[0 + REGION_MASS] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_X] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_Y] = 0;\n\n    // Add each node in the tree\n    l = 1;\n    for (n = 0; n < order; n += PPN) {\n      // Current region, starting with root\n      r = 0;\n      subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n\n      while (true) {\n        // Are there sub-regions?\n\n        // We look at first child index\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // There are sub-regions\n\n          // We just iterate to find a \"leaf\" of the tree\n          // that is an empty region or a region with a single node\n          // (see next case)\n\n          // Find the quadrant of n\n          if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD];\n            } else {\n              // Bottom Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n            }\n          } else if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n            // Top Right quarter\n            q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n          } else {\n            // Bottom Right quarter\n            q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n          }\n\n          // Update center of mass and mass (we only do it for non-leave regions)\n          RegionMatrix[r + REGION_MASS_CENTER_X] =\n            (RegionMatrix[r + REGION_MASS_CENTER_X] * RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_X] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS_CENTER_Y] =\n            (RegionMatrix[r + REGION_MASS_CENTER_Y] * RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_Y] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS] += NodeMatrix[n + NODE_MASS];\n\n          // Iterate on the right quadrant\n          r = q;\n          continue;\n        } else {\n          // There are no sub-regions: we are in a \"leaf\"\n\n          // Is there a node in this leave?\n          if (RegionMatrix[r + REGION_NODE] < 0) {\n            // There is no node in region:\n            // we record node n and go on\n            RegionMatrix[r + REGION_NODE] = n;\n            break;\n          } else {\n            // There is a node in this region\n\n            // We will need to create sub-regions, stick the two\n            // nodes (the old one r[0] and the new one n) in two\n            // subregions. If they fall in the same quadrant,\n            // we will iterate.\n\n            // Create sub-regions\n            RegionMatrix[r + REGION_FIRST_CHILD] = l * PPR;\n            w = RegionMatrix[r + REGION_SIZE] / 2; // new size (half)\n\n            // NOTE: we use screen coordinates\n            // from Top Left to Bottom Right\n\n            // Top Left sub-region\n            g = RegionMatrix[r + REGION_FIRST_CHILD];\n\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] = RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] = RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Left sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] = RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] = RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Top Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] = RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] = RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] = RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] = RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = RegionMatrix[r + REGION_NEXT_SIBLING];\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            l += 4;\n\n            // Now the goal is to find two different sub-regions\n            // for the two nodes: the one previously recorded (r[0])\n            // and the one we want to add (n)\n\n            // Find the quadrant of the old node\n            if (NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n              if (NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else if (NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n            } else {\n              // Bottom Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n            }\n\n            // We remove r[0] from the region r, add its mass to r and record it in q\n            RegionMatrix[r + REGION_MASS] = NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_MASS];\n            RegionMatrix[r + REGION_MASS_CENTER_X] = NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X];\n            RegionMatrix[r + REGION_MASS_CENTER_Y] = NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y];\n\n            RegionMatrix[q + REGION_NODE] = RegionMatrix[r + REGION_NODE];\n            RegionMatrix[r + REGION_NODE] = -1;\n\n            // Find the quadrant of n\n            if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Right quarter\n              q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n            } else {\n              // Bottom Right quarter\n              q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n            }\n\n            if (q === q2) {\n              // If both nodes are in the same quadrant,\n              // we have to try it again on this quadrant\n              if (subdivisionAttempts--) {\n                r = q;\n                continue; // while\n              } else {\n                // we are out of precision here, and we cannot subdivide anymore\n                // but we have to break the loop anyway\n                subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n                break; // while\n              }\n            }\n\n            // If both quadrants are different, we record n\n            // in its quadrant\n            RegionMatrix[q2 + REGION_NODE] = n;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  // 2) Repulsion\n  //--------------\n  // NOTES: adjustSizes = antiCollision & scalingRatio = coefficient\n\n  if (options.barnesHutOptimize) {\n    coefficient = options.scalingRatio;\n\n    // Applying repulsion through regions\n    for (n = 0; n < order; n += PPN) {\n      // Computing leaf quad nodes iteration\n\n      r = 0; // Starting with root region\n      while (true) {\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // The region has sub-regions\n\n          // We run the Barnes Hut test to see if we are at the right distance\n          distance =\n            (NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X]) ** 2 + (NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y]) ** 2;\n\n          s = RegionMatrix[r + REGION_SIZE];\n\n          if ((4 * s * s) / distance < thetaSquared) {\n            // We treat the region as a single body, and we repulse\n\n            xDist = NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X];\n            yDist = NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y];\n\n            if (adjustSizes === true) {\n              // -- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor = (coefficient * NodeMatrix[n + NODE_MASS] * RegionMatrix[r + REGION_MASS]) / distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor = (-coefficient * NodeMatrix[n + NODE_MASS] * RegionMatrix[r + REGION_MASS]) / Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              // -- Linear Repulsion\n              if (distance > 0) {\n                factor = (coefficient * NodeMatrix[n + NODE_MASS] * RegionMatrix[r + REGION_MASS]) / distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n\n            // When this is done, we iterate. We have to look at the next sibling.\n            r = RegionMatrix[r + REGION_NEXT_SIBLING];\n            if (r < 0) break; // No next sibling: we have finished the tree\n\n            continue;\n          } else {\n            // The region is too close and we have to look at sub-regions\n            r = RegionMatrix[r + REGION_FIRST_CHILD];\n            continue;\n          }\n        } else {\n          // The region has no sub-region\n          // If there is a node r[0] and it is not n, then repulse\n          rn = RegionMatrix[r + REGION_NODE];\n\n          if (rn >= 0 && rn !== n) {\n            xDist = NodeMatrix[n + NODE_X] - NodeMatrix[rn + NODE_X];\n            yDist = NodeMatrix[n + NODE_Y] - NodeMatrix[rn + NODE_Y];\n\n            distance = xDist * xDist + yDist * yDist;\n\n            if (adjustSizes === true) {\n              // -- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor = (coefficient * NodeMatrix[n + NODE_MASS] * NodeMatrix[rn + NODE_MASS]) / distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor = (-coefficient * NodeMatrix[n + NODE_MASS] * NodeMatrix[rn + NODE_MASS]) / Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              // -- Linear Repulsion\n              if (distance > 0) {\n                factor = (coefficient * NodeMatrix[n + NODE_MASS] * NodeMatrix[rn + NODE_MASS]) / distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n          }\n\n          // When this is done, we iterate. We have to look at the next sibling.\n          r = RegionMatrix[r + REGION_NEXT_SIBLING];\n\n          if (r < 0) break; // No next sibling: we have finished the tree\n\n          continue;\n        }\n      }\n    }\n  } else {\n    coefficient = options.scalingRatio;\n\n    // Square iteration\n    for (n1 = 0; n1 < order; n1 += PPN) {\n      for (n2 = 0; n2 < n1; n2 += PPN) {\n        // Common to both methods\n        xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n        yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n        if (adjustSizes === true) {\n          // -- Anticollision Linear Repulsion\n          distance = Math.sqrt(xDist * xDist + yDist * yDist) - NodeMatrix[n1 + NODE_SIZE] - NodeMatrix[n2 + NODE_SIZE];\n\n          if (distance > 0) {\n            factor = (coefficient * NodeMatrix[n1 + NODE_MASS] * NodeMatrix[n2 + NODE_MASS]) / distance / distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] += xDist * factor;\n            NodeMatrix[n2 + NODE_DY] += yDist * factor;\n          } else if (distance < 0) {\n            factor = 100 * coefficient * NodeMatrix[n1 + NODE_MASS] * NodeMatrix[n2 + NODE_MASS];\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        } else {\n          // -- Linear Repulsion\n          distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n          if (distance > 0) {\n            factor = (coefficient * NodeMatrix[n1 + NODE_MASS] * NodeMatrix[n2 + NODE_MASS]) / distance / distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        }\n      }\n    }\n  }\n\n  // 3) Gravity\n  //------------\n  g = options.gravity / options.scalingRatio;\n  coefficient = options.scalingRatio;\n  for (n = 0; n < order; n += PPN) {\n    factor = 0;\n\n    // Common to both methods\n    xDist = NodeMatrix[n + NODE_X];\n    yDist = NodeMatrix[n + NODE_Y];\n    distance = Math.sqrt(xDist ** 2 + yDist ** 2);\n\n    if (options.strongGravityMode) {\n      // -- Strong gravity\n      if (distance > 0) factor = coefficient * NodeMatrix[n + NODE_MASS] * g;\n    } else {\n      // -- Linear Anti-collision Repulsion n\n      if (distance > 0) factor = (coefficient * NodeMatrix[n + NODE_MASS] * g) / distance;\n    }\n\n    // Updating node's dx and dy\n    NodeMatrix[n + NODE_DX] -= xDist * factor;\n    NodeMatrix[n + NODE_DY] -= yDist * factor;\n  }\n\n  // 4) Attraction\n  //---------------\n  coefficient = 1 * (options.outboundAttractionDistribution ? outboundAttCompensation : 1);\n\n  // TODO: simplify distance\n  // TODO: coefficient is always used as -c --> optimize?\n  for (e = 0; e < size; e += PPE) {\n    n1 = EdgeMatrix[e + EDGE_SOURCE];\n    n2 = EdgeMatrix[e + EDGE_TARGET];\n    w = EdgeMatrix[e + EDGE_WEIGHT];\n\n    // Edge weight influence\n    ewc = w ** options.edgeWeightInfluence;\n\n    // Common measures\n    xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n    yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n    // Applying attraction to nodes\n    if (adjustSizes === true) {\n      distance = Math.sqrt(xDist ** 2 + yDist ** 2 - NodeMatrix[n1 + NODE_SIZE] - NodeMatrix[n2 + NODE_SIZE]);\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          // -- LinLog Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance / NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          // -- LinLog Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n          }\n        }\n      } else if (options.outboundAttractionDistribution) {\n        // -- Linear Degree Distributed Anti-collision Attraction\n        if (distance > 0) {\n          factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n        }\n      } else {\n        // -- Linear Anti-collision Attraction\n        if (distance > 0) {\n          factor = -coefficient * ewc;\n        }\n      }\n    } else {\n      distance = Math.sqrt(xDist ** 2 + yDist ** 2);\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          // -- LinLog Degree Distributed Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance / NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          // -- LinLog Attraction\n          if (distance > 0) factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n        }\n      } else if (options.outboundAttractionDistribution) {\n        // -- Linear Attraction Mass Distributed\n        // NOTE: Distance is set to 1 to override next condition\n        distance = 1;\n        factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n      } else {\n        // -- Linear Attraction\n        // NOTE: Distance is set to 1 to override next condition\n        distance = 1;\n        factor = -coefficient * ewc;\n      }\n    }\n\n    // Updating nodes' dx and dy\n    // TODO: if condition or factor = 1?\n    if (distance > 0) {\n      // Updating nodes' dx and dy\n      NodeMatrix[n1 + NODE_DX] += xDist * factor;\n      NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n      NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n      NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n    }\n  }\n\n  // 5) Apply Forces\n  //-----------------\n  let force;\n  let swinging;\n  let traction;\n  let nodespeed;\n  let newX;\n  let newY;\n\n  // MATH: sqrt and square distances\n  if (adjustSizes === true) {\n    for (n = 0; n < order; n += PPN) {\n      if (!NodeMatrix[n + NODE_FIXED]) {\n        force = Math.sqrt(NodeMatrix[n + NODE_DX] ** 2 + NodeMatrix[n + NODE_DY] ** 2);\n\n        if (force > MAX_FORCE) {\n          NodeMatrix[n + NODE_DX] = (NodeMatrix[n + NODE_DX] * MAX_FORCE) / force;\n          NodeMatrix[n + NODE_DY] = (NodeMatrix[n + NODE_DY] * MAX_FORCE) / force;\n        }\n\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) * (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) * (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]),\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) * (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) * (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]),\n          ) / 2;\n\n        nodespeed = (0.1 * Math.log(1 + traction)) / (1 + Math.sqrt(swinging));\n\n        // Updating node's positon\n        newX = NodeMatrix[n + NODE_X] + NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY = NodeMatrix[n + NODE_Y] + NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  } else {\n    for (n = 0; n < order; n += PPN) {\n      if (!NodeMatrix[n + NODE_FIXED]) {\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) * (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) * (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]),\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) * (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) * (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]),\n          ) / 2;\n\n        nodespeed = (NodeMatrix[n + NODE_CONVERGENCE] * Math.log(1 + traction)) / (1 + Math.sqrt(swinging));\n\n        // Updating node convergence\n        NodeMatrix[n + NODE_CONVERGENCE] = Math.min(\n          1,\n          Math.sqrt((nodespeed * (NodeMatrix[n + NODE_DX] ** 2 + NodeMatrix[n + NODE_DY] ** 2)) / (1 + Math.sqrt(swinging))),\n        );\n\n        // Updating node's positon\n        newX = NodeMatrix[n + NODE_X] + NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY = NodeMatrix[n + NODE_Y] + NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  }\n\n  // We return the information about the layout (no need to return the matrices)\n  return {};\n}\n\n/**\n * Graphology ForceAtlas2 Helpers\n * ===============================\n *\n * Miscellaneous helper functions.\n */\n\n/**\n * Function used to validate the given settings.\n *\n * @param  {object}      settings - Settings to validate.\n * @return {object|null}\n */\nfunction validateSettings(settings) {\n  if ('linLogMode' in settings && typeof settings.linLogMode !== 'boolean') return { message: 'the `linLogMode` setting should be a boolean.' };\n\n  if ('outboundAttractionDistribution' in settings && typeof settings.outboundAttractionDistribution !== 'boolean')\n    return { message: 'the `outboundAttractionDistribution` setting should be a boolean.' };\n\n  if ('adjustSizes' in settings && typeof settings.adjustSizes !== 'boolean') return { message: 'the `adjustSizes` setting should be a boolean.' };\n\n  if ('edgeWeightInfluence' in settings && typeof settings.edgeWeightInfluence !== 'number' && settings.edgeWeightInfluence < 0)\n    return { message: 'the `edgeWeightInfluence` setting should be a number >= 0.' };\n\n  if ('scalingRatio' in settings && typeof settings.scalingRatio !== 'number' && settings.scalingRatio < 0)\n    return { message: 'the `scalingRatio` setting should be a number >= 0.' };\n\n  if ('strongGravityMode' in settings && typeof settings.strongGravityMode !== 'boolean')\n    return { message: 'the `strongGravityMode` setting should be a boolean.' };\n\n  if ('gravity' in settings && typeof settings.gravity !== 'number' && settings.gravity < 0)\n    return { message: 'the `gravity` setting should be a number >= 0.' };\n\n  if ('slowDown' in settings && typeof settings.slowDown !== 'number' && settings.slowDown < 0)\n    return { message: 'the `slowDown` setting should be a number >= 0.' };\n\n  if ('barnesHutOptimize' in settings && typeof settings.barnesHutOptimize !== 'boolean')\n    return { message: 'the `barnesHutOptimize` setting should be a boolean.' };\n\n  if ('barnesHutTheta' in settings && typeof settings.barnesHutTheta !== 'number' && settings.barnesHutTheta < 0)\n    return { message: 'the `barnesHutTheta` setting should be a number >= 0.' };\n\n  return null;\n}\n\n/**\n * Function generating a flat matrix for both nodes & edges of the given graph.\n *\n * @param  {Graph}  graph - Target graph.\n * @return {object}       - Both matrices.\n */\nfunction graphToByteArrays(graph) {\n  const nodes = graph.nodes();\n  const edges = graph.edges();\n  const order = nodes.length;\n  const size = edges.length;\n  const index = {};\n  let i;\n  let j;\n\n  const NodeMatrix = new Float32Array(order * PPN);\n  const EdgeMatrix = new Float32Array(size * PPE);\n\n  // Iterate through nodes\n  for (i = j = 0; i < order; i++) {\n    // Node index\n    index[nodes[i]] = j;\n\n    // Populating byte array\n    NodeMatrix[j] = graph.getNodeAttribute(nodes[i], 'x');\n    NodeMatrix[j + 1] = graph.getNodeAttribute(nodes[i], 'y');\n    NodeMatrix[j + 2] = 0;\n    NodeMatrix[j + 3] = 0;\n    NodeMatrix[j + 4] = 0;\n    NodeMatrix[j + 5] = 0;\n    NodeMatrix[j + 6] = 1 + graph.degree(nodes[i]);\n    NodeMatrix[j + 7] = 1;\n    NodeMatrix[j + 8] = graph.getNodeAttribute(nodes[i], 'size') || 1;\n    NodeMatrix[j + 9] = 0;\n    j += PPN;\n  }\n\n  // Iterate through edges\n  for (i = j = 0; i < size; i++) {\n    // Populating byte array\n    EdgeMatrix[j] = index[graph.source(edges[i])];\n    EdgeMatrix[j + 1] = index[graph.target(edges[i])];\n    EdgeMatrix[j + 2] = graph.getEdgeAttribute(edges[i], 'weight') || 0;\n    j += PPE;\n  }\n\n  return {\n    nodes: NodeMatrix,\n    edges: EdgeMatrix,\n  };\n}\n\n/**\n * Function applying the layout back to the graph.\n *\n * @param {Graph}        graph      - Target graph.\n * @param {Float32Array} NodeMatrix - Node matrix.\n */\nfunction assignLayoutChanges(graph, NodeMatrix) {\n  const nodes = graph.nodes();\n\n  for (let i = 0, j = 0, l = NodeMatrix.length; i < l; i += PPN) {\n    graph.setNodeAttribute(nodes[j], 'x', NodeMatrix[i]);\n    graph.setNodeAttribute(nodes[j], 'y', NodeMatrix[i + 1]);\n    j++;\n  }\n}\n\n/**\n * Function collecting the layout positions.\n *\n * @param  {Graph}        graph      - Target graph.\n * @param  {Float32Array} NodeMatrix - Node matrix.\n * @return {object}                  - Map to node positions.\n */\nfunction collectLayoutChanges(graph, NodeMatrix) {\n  const nodes = graph.nodes();\n  const positions = Object.create(null);\n\n  for (let i = 0, j = 0, l = NodeMatrix.length; i < l; i += PPN) {\n    positions[nodes[j]] = {\n      x: NodeMatrix[i],\n      y: NodeMatrix[i + 1],\n    };\n\n    j++;\n  }\n\n  return positions;\n}\n\nfunction assignH(target, ...other) {\n  target = target || {};\n\n  const objects = Array.prototype.slice.call(arguments).slice(1);\n  let i;\n  let k;\n  let l;\n\n  for (i = 0, l = objects.length; i < l; i++) {\n    if (!objects[i]) continue;\n\n    for (k in objects[i]) target[k] = objects[i][k];\n  }\n\n  return target;\n}\n\nconst DEFAULT_SETTINGS = {\n  linLogMode: false,\n  outboundAttractionDistribution: false,\n  adjustSizes: false,\n  edgeWeightInfluence: 0,\n  scalingRatio: 1,\n  strongGravityMode: false,\n  gravity: 1,\n  slowDown: 1,\n  barnesHutOptimize: false,\n  barnesHutTheta: 0.5,\n};\n\nself.addEventListener('message', function (e) {\n  const postMessage = self.postMessage as any;\n  const { nodes } = e.data;\n  const { edges } = e.data;\n  const { params } = e.data;\n\n  const graph = new Graph();\n\n  nodes.forEach((node) => {\n    graph.addNode(node.meshIndex, {\n      x: node.x,\n      y: node.y,\n    });\n  });\n  edges.forEach((edge) => {\n    graph.addEdge(edge.source, edge.destination);\n  });\n\n  const { iterations } = params;\n\n  // Validating settings\n  const settings = assignH({}, DEFAULT_SETTINGS, params.settings);\n  const validationError = validateSettings(settings);\n\n  if (validationError) throw new Error(`graphology-layout-forceatlas2: ${validationError.message}`);\n\n  // Building matrices\n  const matrices = graphToByteArrays(graph);\n  let i;\n\n  // Iterating\n  for (i = 0; i < iterations; i++) {\n    if (i % Math.floor(iterations / 100) === 0) {\n      const res = collectLayoutChanges(graph, matrices.nodes);\n\n      postMessage({\n        type: 'progress',\n        progress: (i / iterations) * 100,\n        positions: res,\n      });\n    }\n    iterate(settings, matrices.nodes, matrices.edges);\n  }\n\n  const res = collectLayoutChanges(graph, matrices.nodes);\n\n  postMessage({\n    type: 'finish',\n    positions: res,\n    progress: 0,\n  });\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_graphology_dist_graphology_umd_min_js\"], () => (__webpack_require__(\"./src/components/workers/embeddings/forceatlas2.worker.ts\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_components_workers_embeddings_forceatlas2_worker_ts\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkPSE\"] = self[\"webpackChunkPSE\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"vendors-node_modules_graphology_dist_graphology_umd_min_js\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":["Graph","NODE_X","NODE_Y","NODE_DX","NODE_DY","NODE_OLD_DX","NODE_OLD_DY","NODE_MASS","NODE_CONVERGENCE","NODE_SIZE","NODE_FIXED","EDGE_SOURCE","EDGE_TARGET","EDGE_WEIGHT","REGION_NODE","REGION_CENTER_X","REGION_CENTER_Y","REGION_SIZE","REGION_NEXT_SIBLING","REGION_FIRST_CHILD","REGION_MASS","REGION_MASS_CENTER_X","REGION_MASS_CENTER_Y","SUBDIVISION_ATTEMPTS","PPN","PPE","PPR","MAX_FORCE","iterate","options","NodeMatrix","EdgeMatrix","l","r","n","n1","n2","rn","e","w","g","s","order","length","size","adjustSizes","thetaSquared","barnesHutTheta","outboundAttCompensation","coefficient","xDist","yDist","ewc","distance","factor","RegionMatrix","outboundAttractionDistribution","barnesHutOptimize","minX","Infinity","maxX","minY","maxY","q","q2","subdivisionAttempts","Math","min","max","dx","dy","scalingRatio","sqrt","gravity","strongGravityMode","edgeWeightInfluence","linLogMode","log","force","swinging","traction","nodespeed","newX","newY","slowDown","validateSettings","settings","message","graphToByteArrays","graph","nodes","edges","index","i","j","Float32Array","getNodeAttribute","degree","source","target","getEdgeAttribute","assignLayoutChanges","setNodeAttribute","collectLayoutChanges","positions","Object","create","x","y","assignH","other","objects","Array","prototype","slice","call","arguments","k","DEFAULT_SETTINGS","self","addEventListener","postMessage","data","params","forEach","node","addNode","meshIndex","edge","addEdge","destination","iterations","validationError","Error","matrices","floor","res","type","progress"],"sourceRoot":""}